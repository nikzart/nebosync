// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  ADMIN
  STAFF
}

// Enum for order status
enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum for order type
enum OrderType {
  ROOM_SERVICE
  FOOD
  CUSTOM_REQUEST
}

// Enum for message type
enum MessageType {
  TEXT
  IMAGE
  VOICE
}

// Enum for invoice status
enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
}

// Admin and Staff users (unified login)
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          UserRole
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  activityLogs  ActivityLog[]
  assignedChats Message[]     @relation("StaffMessages")

  @@index([email])
  @@map("users")
}

// Guest users (separate login)
model Guest {
  id            String   @id @default(cuid())
  email         String?  @unique
  phone         String   @unique
  name          String
  roomId        String?  @unique
  checkInDate   DateTime
  checkOutDate  DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  room          Room?    @relation("GuestRoom", fields: [roomId], references: [id])
  orders        Order[]
  messages      Message[] @relation("GuestMessages")
  invoices      Invoice[]

  @@index([phone])
  @@index([roomId])
  @@map("guests")
}

// Hotel rooms
model Room {
  id            String   @id @default(cuid())
  roomNumber    String   @unique
  roomType      String
  floor         Int
  isOccupied    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  guest         Guest?   @relation("GuestRoom")

  @@index([roomNumber])
  @@map("rooms")
}

// Services offered by hotel
model Service {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  category      String
  imageUrl      String?
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orderItems    OrderItem[]

  @@map("services")
}

// Food menu items
model FoodMenu {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  category      String   // Breakfast, Lunch, Dinner, Beverages, etc.
  imageUrl      String?
  isAvailable   Boolean  @default(true)
  isVeg         Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orderItems    OrderItem[]

  @@map("food_menu")
}

// Orders placed by guests
model Order {
  id            String      @id @default(cuid())
  guestId       String
  orderType     OrderType
  status        OrderStatus @default(PENDING)
  notes         String?
  totalAmount   Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  guest         Guest       @relation(fields: [guestId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  invoiceItems  InvoiceItem[]

  @@index([guestId])
  @@index([status])
  @@map("orders")
}

// Individual items in an order
model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  serviceId     String?
  foodMenuId    String?
  quantity      Int      @default(1)
  price         Float
  subtotal      Float
  createdAt     DateTime @default(now())

  // Relations
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service       Service?  @relation(fields: [serviceId], references: [id])
  foodMenu      FoodMenu? @relation(fields: [foodMenuId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

// Chat messages between guest and staff
model Message {
  id            String      @id @default(cuid())
  guestId       String
  staffId       String?
  content       String
  messageType   MessageType @default(TEXT)
  mediaUrl      String?     // For images and voice messages
  isFromGuest   Boolean     @default(true)
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())

  // Relations
  guest         Guest       @relation("GuestMessages", fields: [guestId], references: [id], onDelete: Cascade)
  staff         User?       @relation("StaffMessages", fields: [staffId], references: [id])

  @@index([guestId])
  @@index([staffId])
  @@index([createdAt])
  @@map("messages")
}

// Invoices for guest billing
model Invoice {
  id            String        @id @default(cuid())
  guestId       String
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  subtotal      Float         @default(0)
  tax           Float         @default(0)
  total         Float         @default(0)
  notes         String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  guest         Guest         @relation(fields: [guestId], references: [id], onDelete: Cascade)
  invoiceItems  InvoiceItem[]

  @@index([guestId])
  @@index([invoiceNumber])
  @@map("invoices")
}

// Individual items in an invoice
model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  orderId       String?
  description   String
  quantity      Int
  unitPrice     Float
  total         Float
  createdAt     DateTime @default(now())

  // Relations
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  order         Order?   @relation(fields: [orderId], references: [id])

  @@index([invoiceId])
  @@map("invoice_items")
}

// Activity logs for admin monitoring
model ActivityLog {
  id            String   @id @default(cuid())
  userId        String?
  action        String
  entity        String   // "order", "guest", "service", etc.
  entityId      String?
  description   String
  metadata      Json?
  createdAt     DateTime @default(now())

  // Relations
  user          User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([createdAt])
  @@map("activity_logs")
}

// WiFi credentials management
model WiFiCredential {
  id            String   @id @default(cuid())
  ssid          String
  password      String
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("wifi_credentials")
}
